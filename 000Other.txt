# Phân biệt công ty Outsource và Product:
Công ty Outsourcing nhận dự án làm và bàn giao sản phẩm. Còn công ty Product làm sản phẩm cho chính họ.
VD: Công ty A thuê 1 bên công ty outsourcing code cho 1 tính năng mới của họ; Công ty B là 1 công ty Product vì họ có dev tự code tính năng của chính họ. VD công ty Momo có 1 đội dev từng chức năng cho cái ví thì Momo là công ty product
Start up na ná Product nhưng nó là mới còn Product thì sp cũng có sẵn r và code thêm chức năng vào
Outsourcing: dự án to, đông người, chuẩn có chứng chỉ, quy trình chuẩn, nhiều công nghệ, tranh giành dự án, cạnh tranh cao, mục tiêu sản phẩm dành cho ai k rõ ràng, yêu cầu vô lý về chức năng vô dụng cũng phải thực hiện.
Product: quy mô nhỏ hơn, công ty nắm giữ sản phẩm nên dev hiểu được sản phẩm dành cho ai và biết chức năng này có ích gì trong thực tế, có thể thảo luận với cấp trên về chức năng này có nên làm k. VD trava là công ty product. Làm product dễ thở hơn trong khi outsourcing chậm bị chửi sấp mặt. Quy trình có thể k chuẩn lắm VD code frontend có thể chế ra design ở 1 số chỗ k cần chuẩn nhưng outsource mà sai là ăn cứt. Dự án lớn thì họ vẫn có quy trình chuẩn rõ ràng



# POC(Proof of Concept)
1 ứng dụng chứng minh tính khả thi của 1 ý tưởng or 1 method nào đó => giúp cho việc chứng minh 1 ý tưởng gì là đúng, giúp ta đi đúng vào 1 cái hướng có tính thực tiễn, khả thi chứ kp là mãi mãi chỉ là lời nói k thể áp dụng thực tiễn, giúp tăng tính thuyết phục về ý tưởng.
Ví dụ ta thể hiện proof of concept của cái gì tức là ta đang đưa ra những lý lẽ của nó và nó áp dụng trong thực tế khả thi ntn



# BrSE (bridge system engineering) 
Kỹ sư cầu nối, kết nối team dev với khách hàng. Phải nắm được từ đầu tới đuôi dự án để ứng phó kịp thời. Họ liên hệ, phân tích yêu cầu, trực tiếp code, demo sản phẩm, báo cáo tiến độ, thương lượng. 
PM bình thường là người phân chia, giám sát công việc từng người thì BrSE kiêm vai trò PM chỉ là giám sát chung dự án và báo cáo tiến độ cho khách mà thôi



# Dial up VPN
Cho phép user connect vào internet bằng modem dial-up truyền thống or đường dây điện thoại ISDN. Nó là phương pháp tạo kết nối an toàn qua mạng công cộng thường được dùng trước khi internet băng thông rộng trở nên phổ biến.
Nch nó là pp giúp đảm bảo tính bảo mật của dữ liệu khi truyền qua kết nối dial up



# Các mô hình web stack
MEAN: MongoDB, ExpressJS, AngularJS, NodeJS
MERN: MongoDB, Express, React, NodeJS
JAM: JS, API, Markup
WAMP: Windows, Apache, MySQL, PHP => kbh dùng
LAMP: Linux, Apache, MySQL, PHP => kbh dùng



# Tính năng của VSC
-> Forwarding port
Mục ports cạnh terminal, dùng DevTunnel để forwarding port local ra ngoài internet nhanh

-> Cách search trong node_modules bằng VSC
Vào user settings tìm search exclude: xóa **/node_modules đi
Nếu chỉ tìm node_modules theo tên file thì nên dùng extension Find in node_modules

-> https://www.xda-developers.com/how-use-gpu-visual-studio-code/
Dùng GPU cho VSC giúp tốc độ của VSC tăng cao đặc biệt khi liên quan đến các tác vụ render

-> URL tổng hợp phím tắt của VSC: https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf
CTRL + T => search biến và hàm trong code
CTRL + D => multiple select
CTRL + SHIFT + L => multiple select all
CTRL + B 

-> Open simple browser



# Biến gg drive thành streaming server phim
Các web làm phim phải bỏ ra lượng tiền lớn để thuê streaming server cho video. Ta có thể tận dụng gg drive làm streaming server lưu phim.

Đầu tiên khi mở 1 video trong gg drive, nó gửi request https://drive.google.com/get_video_info?docid=<...>&drive_originator_app=<...> với từng video. Mỗi video có 1 id riêng. Sau khi tải vid lên ta chỉ cần lấy id đó là được
Có nhiều đường link để get_video_info như: https://mail.google.com/e/get_video_info  https://drive.google.com/e/get_video_info  https://docs.google.com/e/get_video_info
Nhận kết quả trả về cho vào nodejs thư viện query-string để parse data lấy ra trường fmt_stream_map. Trường này định nghĩa ra các url tương ứng với chất lượng video khác nhau. VD 18 là MP4 360p, 22 là MP4 720p.
Mở url lên là xem được phim. Nếu mở local ở máy ta sau khi đã đăng nhập thì được nhưng mở ở máy người khác thì không:
- Để qua mặt check ip của gg: Ta phải lấy 2 đường link ipv4 và ipv6, check khi người dùng xài IPv4 thì đưa link ipv6 và ngược lại vì gg drive k check ip khi type khác nhau.
- Tuy nhiên để link đó hoạt động thì cần có cookie trường DRIVE_STREAM khi truy cập url. Thậm chi có thể phải redirect qua nhiều url thì mới có được link chạy được luôn, ở mỗi url redirect lại phải thêm cookie vào. Để thêm Cookie vào request, ta thêm vào headers. VD thêm 2 trường vào cookie thì headers sẽ là: Cookie: Key1=Value1;Key2=Value2

=> Chính vì cookie nên hiện tại k thể dùng gg drive làm streaming server được nữa. 
Thực tế ta vẫn có thể làm bằng puppeter kiểu: client gửi request video tới server -> server search database ra id -> get_video_info lấy url -> dùng puppetter truy cập gg drive của ta để lấy cookie -> server dùng cookie liên tục truy cập streaming server, để kệ nó redirect tới page cuối cùng thì lấy ra url cuối -> gửi lại url đó và cookie cho client -> client xem được video. Các hãng thấy phim lậu có thể report dựa vào id của video để gg drive chặn lại.  



# Monorepos
Mã code mọi phần trong hệ thống lưu chung 1 repo. Nó khác với kiến trúc nguyên khối vì nó vẫn tách, chỉ là lưu chung 1 repo thôi. Lợi ích lớn nhất là dev có thể chạy 1 phát toàn bộ nền tảng trên máy họ luôn.
=> Có ưu và nhược điểm riêng, best case thì chỉ nên dùng monorepo khi các phần trong dự án chạy cùng 1 ngôn ngữ hoặc cần chạy cùng với nhau.
VD mỗi khi code cần chạy song song UI và server thì nên gom chung 1 repo thay vì tạo 2 repo. Ví dụ pull code về là có bản mới nhất của cả FE BE luôn.
VD các thư viện, SDK dùng trong dự án mà tái sử dụng ở các dự án khác thì nên tách nó ở repo riêng.



# Content Management System
CMS là hệ thống quản trị nội dung. VD ta quản lý text, video, ảnh các thứ bằng CMS chẳng hạn. Nó khác với 1 cái store bth ở chỗ là nó dùng để quản lý tài nguyên trên trang web. 1 CMS tốt sẽ cho phép tạo và quản lý website hoàn toàn bằng giao diện mà k cần code. 
VD wordpress, admin có thể vào quản lý tài nguyên trang web hay tạo các thành phần web hoàn toàn bằng giao diện và là serverless luôn.



# Command Injection
Chỉ bị khi ứng dụng cho ngừoi dùng nhập input để nhét vào command. Thì giông SQL injection, nhập command nguy hiểm vào cho máy chạy là dính.



# Command query responsibility segregation (CQRS) pattern
Là pattern trong thiết kế hệ thống phức tạp yêu cầu cao về hiệu suất.
VD Ta phải tách class để GetData và UpdateData logic độc lập. Có thể dùng mô hình dữ liệu hay các tools khác nhau cho việc đọc và ghi.
Việc chia ra master database chuyên ghi và slaves chuyên để đọc cũng chính là dùng CQRS pattern.



# Stackblitz: nền tảng giúp tạo và demo nhanh dự án, tiện khi cần gửi code cho ai đó



# Other:
-> Fintech: là finance và technology, công nghệ tài chính. Là việc sáng tạo công nghệ ứng dụng trong các dịch vụ tài chính. Từ này xuất hiện khi IT dần xâm lấn vào các hệ thống tiền tệ.

-> Prompt engineer là 1 từ chỉ nghề của những người tối ưu hóa input cho AI chạy để có đầu ra tốt hơn

-> Liệu có dựng được 1 web server bằng C thuần mà k dùng thư viện. Có thể, hđh luôn có module built-in giúp thao tác với network. Các thư viện http ta dùng ở tầng thấp nhất cũng là dùng các module built-in của hệ điều hành mà thôi. Do đó trong C nếu có thể thao tác với phần cứng thì có thể trigger các module này để thao tác với network.

-> Ngoài HTTP truyền tải dữ liệu qua mạng, còn có SOAP và XML-RPC tương tự nhưng dùng XML để định dạng dữ liệu.

-> Devtool của browser mục responsive cho phép chụp toàn web
CTRL/Command + P => gõ ? => Run Command => Show Layers để mở layer inspector

-> Cách đọc thông số máy tính: Integrated graphics, GPU clock speed, semiconductor size, openGL version, supported display, CPU temparature, CPU speed, turbo clock speed, cache size, RAM speed, max memory bandwidth, max memory size, memory channels, ECC memory, 
URL: https://www.youtube.com/watch?v=USQ_UZVw5rY

-> Mở composer view trong cursor với Command+SHIFT+I => có thể cô lập context, tạo file riêng cho từng mục luôn

-> Series discovering hidden API hay nhưng k thực tiễn: hướng dẫn tìm ra các API ẩn trong website, có thể dùng nó để hack mở khóa các page ẩn thông tin hay trả phí để xem thông tin. URL: https://www.youtube.com/watch?v=twuhocLtGCg&list=PLyb_C2HpOQSCAi67ZF0w-6CvCvZs_OXAB&index=1

-> Lập trình web > lập trình di động > lập trình nhúng - iot
Lập trình di động chỉ khác lập trình web ở FE, còn BE có thể tạo chung API cho cả mobile và web.
Lập trình húng phải thiết kế mạch code trên các con chip nhỏ.
DevOps sẽ phải nắm vững tất cả và các thứ như Azure, GCP, AWS, Docker, Kubernetes, ELK Stack. 
Data engineer chuyên xử lý dữ liệu quyết định đến chiến lược của công ty
Còn các mảng ít code hơn nữa như: Tester, PM(quản lý dự án), BA(cầu nối với khách hàng),.. Đôi khi BA và PM là 1 sẽ tiện hơn
Các mảng học cực nhiều lý thuyết và code khá nhiều như DM, ML, AI,..

-> VD: https://www.youtube.com/watch?v=aBVF-3NE_1Q => setup firebase authen, db, storage, algolia, deploy vercel app

